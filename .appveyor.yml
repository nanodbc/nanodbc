version: 1.0.{build}

os: Visual Studio 2017

platform: x64

configuration: Release

branches:
  only:
    - master
    - latest
    - release

shallow_clone: true
clone_depth: 5

notifications:
  - provider: Webhook
    url: https://webhooks.gitter.im/e/70a268802a5c8a54e09b
    on_build_success: true
    on_build_failure: true
    on_build_status_changed: true

environment:
  matrix:
    - DB: MSSQL2016
      G: "Visual Studio 15 2017 Win64"
    - DB: MSSQL2016
      G: "Visual Studio 15 2017 Win64"
      ENABLE_UNICODE: ON

    - DB: MSSQL2014
      G: "Visual Studio 15 2017 Win64"
    - DB: MSSQL2014
      G: "Visual Studio 15 2017 Win64"
      ENABLE_UNICODE: ON

    - DB: MSSQL2012
      G: "Visual Studio 14 2015 Win64"
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    - DB: MSSQL2012
      G: "Visual Studio 14 2015 Win64"
      ENABLE_UNICODE: ON
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015

    - DB: MSSQL2008
      G: "Visual Studio 14 2015 Win64"
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    - DB: MSSQL2008
      G: "Visual Studio 14 2015 Win64"
      ENABLE_UNICODE: ON
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015

    - DB: MySQL
      G: "Visual Studio 15 2017 Win64"

    - DB: PostgreSQL
      G: "Visual Studio 15 2017 Win64"

    - DB: SQLite
      G: "Visual Studio 15 2017 Win64"
    - DB: SQLite
      G: "Visual Studio 15 2017"

    - DB: SQLite
      G: "MinGW Makefiles"
      P: x86-64
      DISABLE_ASYNC: ON
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015

    - G: "Visual Studio 15 2017 Win64"
      ANALYSIS: "/p:RunCodeAnalysis=true /p:EnableCppCoreCheck=true"
    - G: "Visual Studio 15 2017"
      ANALYSIS: "/p:RunCodeAnalysis=true /p:EnableCppCoreCheck=true"

matrix:
  allow_failures:
    - G: "Visual Studio 15 2017"
      ANALYSIS: "/p:RunCodeAnalysis=true /p:EnableCppCoreCheck=true"
    - G: "Visual Studio 15 2017 Win64"
      ANALYSIS: "/p:RunCodeAnalysis=true /p:EnableCppCoreCheck=true"

init:
  # For MinGW make to work correctly sh.exe must NOT be in your path.
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - ps: |
      Write-Host "Build worker environment variables:" -ForegroundColor Magenta
      Get-ChildItem Env: | %{"{0}={1}" -f $_.Name,$_.Value}
  - if "%G%"=="NMake Makefiles" if "%P%"=="x86-32" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
  - if "%G%"=="NMake Makefiles" if "%P%"=="x86-64" "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64

install:
  - ps: |
      if ($env:DB -Match "SQLite") {
        Write-Host "Installing SQLite ODBC Driver:" -ForegroundColor Magenta
        $sqliteodbc64Path = "$($env:TEMP)\sqliteodbc_w64.exe"
        $sqliteodbc32Path = "$($env:TEMP)\sqliteodbc.exe"
        (New-Object Net.WebClient).DownloadFile('http://www.ch-werner.de/sqliteodbc/sqliteodbc_w64.exe', $sqliteodbc64Path)
        (New-Object Net.WebClient).DownloadFile('http://www.ch-werner.de/sqliteodbc/sqliteodbc.exe', $sqliteodbc32Path)
        cmd /c start /wait $sqliteodbc64Path /S
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        cmd /c start /wait $sqliteodbc32Path /S
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
       }
  - ps: |
      Write-Host "Installed ODBC drivers:" -ForegroundColor Magenta
      Get-OdbcDriver -Platform 64-bit | Select-Object -ExpandProperty Name
  - ps: |
      if ($env:G -Match "MinGW") {
        if ($env:P -Match "x86-32") {
          $env:Path += ";C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin"
        } else {
          $env:Path += ";C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin"
        }
        g++ --version
      }

before_build:
  - ps: if (-not $env:DISABLE_ASYNC) { $env:DISABLE_ASYNC="OFF" }
  - ps: if (-not $env:ENABLE_BOOST)   { $env:ENABLE_BOOST="OFF" }
  - ps: if (-not $env:ENABLE_UNICODE) { $env:ENABLE_UNICODE="OFF" }
  - ps: if (-not $env:DISABLE_EXAMPLES) { $env:DISABLE_EXAMPLES="ON" }
  - ps: if (-not $env:DISABLE_TESTS) { $env:DISABLE_TESTS="OFF" }
  - ps: if (-not $env:DISABLE_INSTALL) { $env:DISABLE_INSTALL="ON" }
  - ps: if ($env:G -Match "NMake") { $env:DISABLE_INSTALL="OFF" }
  - ps: |
      if ($env:ANALYSIS) {
        $env:MSBUILD_ARGS="/warnaserror $env:ANALYSIS"
        $env:DISABLE_EXAMPLES="ON"
        $env:DISABLE_TESTS="ON"
      }

build_script:
  - ps: 'Write-Host "Running cmake: $env:G" -ForegroundColor Magenta'
  - cmake.exe -G "%G%" -DCMAKE_BUILD_TYPE=%CONFIGURATION% -DNANODBC_ENABLE_BOOST=%ENABLE_BOOST% -DNANODBC_ENABLE_UNICODE=%ENABLE_UNICODE% -DNANODBC_DISABLE_ASYNC=%DISABLE_ASYNC% -DNANODBC_DISABLE_EXAMPLES=%DISABLE_EXAMPLES% -DNANODBC_DISABLE_TESTS=%DISABLE_TESTS% -DNANODBC_DISABLE_INSTALL=%DISABLE_INSTALL% %APPVEYOR_BUILD_FOLDER%
  - ps: 'Write-Host "Running cmake --build:" -ForegroundColor Magenta'
  - cmake --build . --config %CONFIGURATION% -- %MSBUILD_ARGS%

before_test:
  - ps: |
      if ($env:ANALYSIS) {
        Write-Host "Static analysis, skipping database services configuration" -ForegroundColor Magenta
      } else {
        Write-Host "Configuring $env:DB service" -ForegroundColor Magenta
        if ($env:DB -Match "MSSQL2008") {
          Start-Service 'MSSQL$SQL2008R2SP2'
        } elseif ($env:DB -Match "MSSQL2012") {
          Start-Service 'MSSQL$SQL2012SP1'
        } elseif ($env:DB -Match "MSSQL2014") {
          Start-Service 'MSSQL$SQL2014'
        } elseif ($env:DB -Match "MSSQL2016") {
          Start-Service 'MSSQL$SQL2016'
        } elseif ($env:DB -Match "MySQL") {
          Start-Service MySQL57
          $env:MYSQL_PWD="Password12!"
          $cmd = '"C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql" -e "create database nanodbc_test;" --user=root'
          iex "& $cmd"
        } elseif ($env:DB -Match "PostgreSQL") {
          Start-Service postgresql-x64-9.5
          $env:PGUSER="postgres"
          $env:PGPASSWORD="Password12!"
          $cmd = '"C:\Program Files\PostgreSQL\9.6\bin\createdb" nanodbc_test'
          iex "& $cmd"
        }
      }
      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

test_script:
  - ps: |
      if ($env:ANALYSIS) {
        Write-Host "Static analysis, skipping tests" -ForegroundColor Magenta
      } else {
        if ($env:DB -Match "MSSQL2008") {
          $env:NANODBC_TEST_CONNSTR_MSSQL="Driver={ODBC Driver 11 for SQL Server};Server=(local)\SQL2008R2SP2;Database=master;UID=sa;PWD=Password12!;"
          $test_name = "mssql_test"
        } elseif ($env:DB -Match "MSSQL2012") {
          $env:NANODBC_TEST_CONNSTR_MSSQL="Driver={ODBC Driver 11 for SQL Server};Server=(local)\SQL2012SP1;Database=master;UID=sa;PWD=Password12!;"
          $test_name = "mssql_test"
        } elseif ($env:DB -Match "MSSQL2014") {
          $env:NANODBC_TEST_CONNSTR_MSSQL="Driver={ODBC Driver 11 for SQL Server};Server=(local)\SQL2014;Database=master;UID=sa;PWD=Password12!;"
          $test_name = "mssql_test"
        } elseif ($env:DB -Match "MSSQL2016") {
          $env:NANODBC_TEST_CONNSTR_MSSQL="Driver={ODBC Driver 11 for SQL Server};Server=(local)\SQL2016;Database=master;UID=sa;PWD=Password12!;"
          $test_name = "mssql_test"
        } elseif ($env:DB -Match "MySQL") {
          $env:NANODBC_TEST_CONNSTR_MYSQL="Driver={MySQL ODBC 5.3 ANSI Driver};Server=127.0.0.1;Database=nanodbc_test;User=root;Password=Password12!;big_packets=1;"
          $test_name = "mysql_test"
        } elseif ($env:DB -Match "PostgreSQL") {
          $env:NANODBC_TEST_CONNSTR_PGSQL="Driver={PostgreSQL ANSI(x64)};Server=127.0.0.1;Port=5432;Database=nanodbc_test;Uid=postgres;Pwd=Password12!;"
          $test_name = "postgresql_test"
        } elseif ($env:DB -Match "SQLite") {
          $test_name = "sqlite_test"
        } else {
          throw 'Database ' + $env:DB + ' not configured yet'
        }
        Write-Host "Running $Env:CONFIGURATION build test: $test_name" -ForegroundColor Magenta
        $cmd = 'ctest -V --output-on-failure -C ' + $Env:CONFIGURATION + ' -R ' + $test_name
        iex "& $cmd"
        if ($LastExitCode -ne 0) {
          Write-Host "Tests failure, uploading Testing/Temporary/LastTest.log to artifacts" -ForegroundColor Magenta
          Push-AppveyorArtifact Testing\Temporary\LastTest.log
          $host.SetShouldExit($LastExitCode)
        }
      }

after_test:
  - ps: |
      if ($env:G -Match "NMake") {
        Write-Host "Running install:" -ForegroundColor Magenta
        cmake --build . --target install
      }
  - ps: |
      if ($env:G -Match "NMake") {
        Write-Host "Building example/client based on nanodbc package configuration:" -ForegroundColor Magenta
        cd $env:APPVEYOR_BUILD_FOLDER\example\client
        cmake.exe -G $env:G -DCMAKE_BUILD_TYPE=Release .
        cmake --build . --config Release
      }

# If you need to debug AppVeyor session (https://www.appveyor.com/docs/how-to/rdp-to-build-worker), then:
# 1. Uncomment the on_finish section below:
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
# 2. Add this line to the init section below
#- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
